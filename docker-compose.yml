version: "3.8"

services:
  router:
    image: nginx:alpine
    deploy:
      replicas: 1
    volumes:
      # ACME account and certificates
      - acme:/acme/:rw
      # background issuing and renewing ACME certificates
      - ./etc/nginx/50-acmesh.sh:/docker-entrypoint.d/50-acmesh.sh:ro
      - ./etc/nginx/healthcheck.sh:/healthcheck.sh
      - ./etc/nginx/nginx.conf:/etc/nginx/nginx.conf
      # Communicate with PHP via Unix socket
      - fpm-socket:/fpm-socket/
    environment:
      CERTIFICATE_DOMAIN_NAMES: "example.com www.example.com"
      LOCAL_DOMAIN_NAME: "example.localhost"
      ACCOUNTEMAIL: "test@example.com"
    healthcheck:
      test: /bin/sh /healthcheck.sh
      interval: 2s
      timeout: 5s
      retries: 2
      start_period: 15s
    networks:
      - hostnet

  application:
    image: grigori/phpextensions:8.0-fpm
    volumes:
      - fpm-socket:/fpm-socket/
      - ./etc/php/install-composer.sh:/docker-entrypoint-init.d/install-composer.sh
      - ./etc/php/php.ini:/usr/local/etc/php/php.ini:ro
      - ./etc/php/fpm.conf:/usr/local/etc/php-fpm.conf:ro
      # application code
      - type: bind
        source: ./app/
        target: /scripts/
        consistency: delegated
    deploy:
      replicas: 1
    env_file: .db.env
    healthcheck:
      test: SCRIPT_NAME=/ping SCRIPT_FILENAME=/ping REQUEST_METHOD=GET  cgi-fcgi -connect /fpm-socket/socket 1 | grep -q  'pong'
      interval: 2s
      timeout: 5s
      retries: 2
    networks:
      - backend

  database:
    image: mysql:8
    volumes:
      - ./etc/mysql/custom.cnf:/etc/mysql/conf.d/custom.cnf:ro
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - db-data:/var/lib/mysql
    deploy:
      replicas: 1
    env_file: .db.env
    environment:
      - MYSQL_ROOT_PASSWORD
    healthcheck:
      test: mysql -u$$MYSQL_USER --password=$$MYSQL_PASSWORD -e "quit" 2>/dev/null
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend

  queue:
    image: redis
    volumes:
      - redis-queue-data:/data
    command: redis-server --appendonly yes
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        window: 20s

volumes:
  acme:
  db-data:
  redis-queue-data:
  fpm-socket:

networks:
  hostnet:
    external: true
    name: host
  backend:
    internal: true
